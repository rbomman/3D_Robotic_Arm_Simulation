import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.widgets as widgets
import numpy as np
import math

class RobotArm3D:
    def __init__(self, segment_lengths):
        self.segment_lengths = segment_lengths
        self.angles = [0, 0, 0]  # Joint angles in degrees
    
    def forward_kinematics(self, angles):
        """
        Given joint angles (in degrees) for the three joints, compute the positions
        of the base and each successive joint.
        """
        points = []
        position = np.array([0.0, 0.0, 0.0])
        orientation = np.eye(3)  # initial orientation
        points.append(position.copy())

        for i, (theta, length) in enumerate(zip(angles, self.segment_lengths)):
            theta_rad = np.radians(theta)
            if i == 0:
                # First joint rotates about Z.
                rotation = np.array([
                    [np.cos(theta_rad), -np.sin(theta_rad), 0],
                    [np.sin(theta_rad),  np.cos(theta_rad), 0],
                    [0,                 0,                 1]
                ])
            elif i == 1:
                # Second joint rotates about Y.
                rotation = np.array([
                    [np.cos(theta_rad), 0, np.sin(theta_rad)],
                    [0,                1, 0],
                    [-np.sin(theta_rad), 0, np.cos(theta_rad)]
                ])
            elif i == 2:
                # Third joint rotates about Z.
                rotation = np.array([
                    [np.cos(theta_rad), -np.sin(theta_rad), 0],
                    [np.sin(theta_rad),  np.cos(theta_rad), 0],
                    [0,                 0,                 1]
                ])
            orientation = orientation @ rotation
            # For the first two joints, translation is along the local X–axis;
            # for the third joint, translation is along the local Y–axis.
            if i < 2:
                translation = np.array([length, 0.0, 0.0])
            else:
                translation = np.array([0.0, length, 0.0])
            position = position + orientation @ translation
            points.append(position.copy())
        return np.array(points)
    
    def update_angles(self, angles):
        # Clamp the joint angles (in degrees) to within reasonable limits.
        self.angles = [max(-270, min(270, a)) for a in angles]
    
    def jacobian(self, angles_rad, delta=1e-6):
        """
        Numerically compute the 3x3 Jacobian matrix (angles in radians).
        """
        J = np.zeros((3, 3))
        f0 = self.forward_kinematics(np.degrees(angles_rad))[-1]
        for i in range(3):
            angles_rad_delta = angles_rad.copy()
            angles_rad_delta[i] += delta
            f_delta = self.forward_kinematics(np.degrees(angles_rad_delta))[-1]
            J[:, i] = (f_delta - f0) / delta
        return J

    def inverse_kinematics_numerical(self, target, max_iter=1000, tol=1e-3):
        """
        Use an iterative Jacobian–pseudoinverse method with damping (damped least squares)
        to move the end–effector toward the target.
        """
        angles_rad = np.radians(self.angles)
        alpha = 0.1       # step size
        lambda_val = 0.01 # damping factor
        for _ in range(max_iter):
            current_pos = self.forward_kinematics(np.degrees(angles_rad))[-1]
            error = target - current_pos
            if np.linalg.norm(error) < tol:
                break
            J = self.jacobian(angles_rad)
            # Damped pseudoinverse:
            J_damped = J.T @ np.linalg.inv(J @ J.T + lambda_val * np.eye(3))
            delta_theta = alpha * J_damped.dot(error)
            angles_rad += delta_theta
        new_angles = np.degrees(angles_rad).tolist()
        print("Numerical IK solution (deg):", new_angles)
        return new_angles

    def plot_arm_interactive(self):
        """
        Opens an interactive 3D plot with an integrated text box for entering target coordinates.
        
        Keyboard controls:
          - Keys '1','2' : decrease/increase joint 1 angle
          - Keys '3','4' : decrease/increase joint 2 angle
          - Keys '5','6' : decrease/increase joint 3 angle
        
        The text box at the bottom accepts target coordinates in the format "x,y,z".
        """
        fig = plt.figure(figsize=(8, 8))
        ax = fig.add_subplot(111, projection='3d')
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')
        
        # Create an axes for the text box
        textbox_ax = plt.axes([0.15, 0.02, 0.7, 0.05])
        text_box = widgets.TextBox(textbox_ax, "Target coords (x,y,z): ", initial="")

        def submit_target(text):
            try:
                target_vals = [float(val.strip()) for val in text.split(',')]
                if len(target_vals) != 3:
                    raise ValueError("Enter three comma-separated numbers.")
                target = np.array(target_vals)
            except Exception as e:
                print("Invalid input:", e)
                return
            
            new_angles = self.inverse_kinematics_numerical(target)
            self.update_angles(new_angles)
            update_arm()

        text_box.on_submit(submit_target)

        def on_key(event):
            # Adjust joint angles manually.
            if event.key == '1':
                self.angles[0] = max(-175, self.angles[0] - 5)
            elif event.key == '2':
                self.angles[0] = min(175, self.angles[0] + 5)
            elif event.key == '3':
                self.angles[1] = max(-175, self.angles[1] - 5)
            elif event.key == '4':
                self.angles[1] = min(175, self.angles[1] + 5)
            elif event.key == '5':
                self.angles[2] = max(-265, self.angles[2] - 5)
            elif event.key == '6':
                self.angles[2] = min(85, self.angles[2] + 5)
            update_arm()

        def update_arm():
            ax.cla()
            total_length = sum(self.segment_lengths)
            ax.set_xlim([-total_length, total_length])
            ax.set_ylim([-total_length, total_length])
            ax.set_zlim([-total_length, total_length])
            points = self.forward_kinematics(self.angles)
            ax.plot(points[:, 0], points[:, 1], points[:, 2], 'o-', markersize=8)
            ax.scatter(points[-1, 0], points[-1, 1], points[-1, 2], c='orange', s=100)
            end_effector = points[-1]
            title_str = (
                f"3D Robot Arm Simulation\n"
                f"Joint Angles (deg): X: {self.angles[0]:.1f}, Y: {self.angles[1]:.1f}, Z: {self.angles[2]:.1f}\n"
                f"End Effector: ({end_effector[0]:.2f}, {end_effector[1]:.2f}, {end_effector[2]:.2f})"
            )
            ax.set_title(title_str, fontsize=10)
            plt.draw()

        fig.canvas.mpl_connect('key_press_event', on_key)
        ax.mouse_init()  # Enable mouse-based 3D rotation.
        update_arm()
        plt.show()

# Example usage:
if __name__ == '__main__':
    segment_lengths = [5, 5, 5]
    robot_arm = RobotArm3D(segment_lengths)
    robot_arm.plot_arm_interactive()
